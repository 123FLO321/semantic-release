#!/usr/bin/env node
'use strict'

var abbrev = require('abbrev')
var confirm = require('confirm-simple')
var minimist = require('minimist')

var efh = require('../lib/error').standard

var argv = minimist(process.argv.slice(2), {
  alias: {
    d: 'debug',
    dry: 'debug',
    t: 'token'
  },
  default: {
    token: process.env.GH_TOKEN || process.env.TOKEN || process.env.GITHUB_TOKEN
  }
})

var npmArgv = process.env.npm_config_argv ?
  minimist(JSON.parse(process.env.npm_config_argv).cooked) :
  {_: []}

if (~argv._.indexOf('pre')) {
  // see src/restart.js
  if (npmArgv['semantic-release-rerun']) process.exit(0)
  // the `prepublish` hook is also executed when the package is installed
  // in this case we abort the command and do nothing.
  if (isAbbrev(npmArgv, 'install')) process.exit(0)

  return confirmCI(function () {
    console.log('Determining new version')

    var publish = false
    if (isAbbrev(npmArgv, 'publish')) publish = true

    require('../src/pre')(argv, efh(function (result) {
      if (!result) {
        console.log('Nothing changed. Not publishing.')
        process.exit(1)
      }

      console.log('Publishing v' + result)
      if (!publish) process.exit(0)

      require('../src/restart')(efh(function () {
        process.exit(1)
      }))
    }))
  })
}

if (~argv._.indexOf('post')) {
  return confirmCI(function () {
    require('../src/post')(argv, efh(function () {
      // see src/restart.js
      if (npmArgv['semantic-release-rerun']) {
        console.log('Everything is alright :) npm will now print an error message that you can safely ignore.')
      }
    }))
  })
}

function confirmCI (cb) {
  if (process.env.CI || argv.ci === false) return cb(null, true)

  confirm('Not running in a CI enviroment. Are you sure you want to run this hook?', function (ok) {
    if (!ok) process.exit(1)
    cb(null, ok)
  })
}

function isAbbrev (argv, command) {
  return argv._.some(Object.prototype.hasOwnProperty.bind(abbrev(command)))
}
